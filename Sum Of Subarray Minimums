import java.util.Stack;

class Solution {
    public int sumSubarrayMins(int[] arr) {
        int[] left = pse(arr);
        int[] right = nse(arr);
        int total = 0;
        int mod = (int)1e9 + 7; 
        for (int i = 0; i < arr.length; i++) {
            long leftCount = i - left[i];  
            long rightCount = right[i] - i;
            total = (int)((total + leftCount * rightCount * arr[i]) % mod);
        }

        return total;
    }

    
    public static int[] pse(int[] arr) {
        int[] res = new int[arr.length];
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < arr.length; i++) {
           
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            
            res[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }

        return res;
    }

    
    public static int[] nse(int[] arr) {
        int[] res = new int[arr.length];
        Stack<Integer> stack = new Stack<>();

        for (int i = arr.length - 1; i >= 0; i--) {
            
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                stack.pop();
            }
            
            res[i] = stack.isEmpty() ? arr.length : stack.peek();
            stack.push(i);
        }

        return res;
    }
}
