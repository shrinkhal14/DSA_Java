class Solution {
    public ArrayList<String> findPath(int[][] mat) {
        ArrayList<String> ans = new ArrayList<>();
        int[][] visited = new int[mat.length][mat.length];
        if (mat[0][0] == 1) {
            recurse(mat, 0, 0, mat.length, ans, "", visited);
        }
        return ans;
    }

    public void recurse(int[][] mat, int i, int j, int n, ArrayList<String> ans, String str, int[][] visited) {
        
        if (i == n - 1 && j == n - 1) {
            ans.add(str);
            return;
        }

        // Mark this cell as visited
        visited[i][j] = 1;

        //downward
        if (i + 1 < n && mat[i + 1][j] == 1 && visited[i + 1][j] == 0) {
            recurse(mat, i + 1, j, n, ans, str + "D", visited);
        }

        //upward
        if (i - 1 >= 0 && mat[i - 1][j] == 1 && visited[i - 1][j] == 0) {
            recurse(mat, i - 1, j, n, ans, str + "U", visited);
        }

        //leftward
        if (j - 1 >= 0 && mat[i][j - 1] == 1 && visited[i][j - 1] == 0) {
            recurse(mat, i, j - 1, n, ans, str + "L", visited);
        }

        //rightward
        if (j + 1 < n && mat[i][j + 1] == 1 && visited[i][j + 1] == 0) {
            recurse(mat, i, j + 1, n, ans, str + "R", visited);
        }

        //unmark this cell for other paths
        visited[i][j] = 0;
    }
}
